---
openapi: 3.0.0
info:
  title: Blog API
  description: This is a sample API, mocking a Blog post application which can be used as mock for creating, updating and deleting a blog post and also to create comments on a blog.
  contact:
    name: MIB
    email: support@mib.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/saimib/Blog/1.0.0
    description: SwaggerHub API Auto Mocking
tags:
  - name: posts
    description: Blog posts
  - name: comments
    description: Comments made on a blog post
paths:
  /posts:
    get:
      tags:
        - posts
      summary: return all the blog posts
      description: |
        Return all the blog posts in the system
      operationId: returnPosts
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_get_blog_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
      responses:
        "200":
          description: array of all posts in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "404":
          description: not found
    post:
      tags:
        - posts
      summary: add a blog post
      description: Adds a blog post to the system
      operationId: addPost
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_post_blog_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
      responses:
        "201":
          description: item created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
  /posts/{id}:
    get:
      tags:
        - posts
      summary: get a blog post
      description: Return the post matching the ID
      operationId: getPost
      parameters:
        - name: id
          in: path
          description: post ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0859
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_get_blog_byid_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
      responses:
        "200":
          description: return post by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "404":
          description: not found
    put:
      tags:
        - posts
      summary: replace a blog post
      description: Adds an item to the system
      operationId: replacePost
      parameters:
        - name: id
          in: path
          description: post ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0859
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_put_blog_byid_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "201":
          description: item created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
    delete:
      tags:
        - posts
      summary: delete a blog post
      description: Deletes a blog post in the system
      operationId: deletePost
      parameters:
        - name: id
          in: path
          description: post ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0859
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_delete_blog_byid_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
      responses:
        "200":
          description: item deleted
        "404":
          description: not found
    patch:
      tags:
        - posts
      summary: modify a blog post
      description: Modifies a blog post in the system
      operationId: modifyPost
      parameters:
        - name: id
          in: path
          description: post ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0859
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_patch_blog_byid_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
      responses:
        "201":
          description: item modified
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: invalid input, object invalid
        "404":
          description: not found
  /posts/{id}/comments:
    get:
      tags:
        - comments
      summary: return all the comments in a post
      description: |
        Return all the blog posts in the system
      operationId: returnComments
      parameters:
        - name: id
          in: path
          description: post ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0859
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_get_comment_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
      responses:
        "200":
          description: array of all comments in the post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "404":
          description: not found
components:
  schemas:
    Post:
      required:
        - author
        - comments
        - content
        - date
        - id
        - title
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        author:
          type: string
          example: George Washington
        date:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
        content:
          type: string
          example: sample content
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
    Comment:
      required:
        - author
        - content
        - date
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0855
        author:
          type: string
          example: Raul nevari
        date:
          type: string
          format: date-time
          example: 2016-08-29T09:12:33.001Z
        content:
          type: string
          example: sample comment
